//
//  MapView.swift
//  Infobus Tracker
//
//  Created by Mag on 02.09.2025.
//

import SwiftUI
import MapKit

struct MapView: View {
    @StateObject private var locationManager = LocationManager()
    @State private var cameraPosition: MapCameraPosition = .region(.defaultRegion)
    @State private var selectedRoutes: [Route] = []
    @State private var cityDetail: CityDetail?
    
    var body: some View {
        Map(position: $cameraPosition) {
            UserAnnotation()
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –Ω–∞–ø—Ä—è–º—É—é
            ForEach(selectedRoutes, id: \.id) { route in
                let coordinates = parseCoordinates(from: route.location)
                if !coordinates.isEmpty {
                    let colors: [Color] = [.red, .blue, .green, .orange, .purple]
                    let selectedRouteIds = SettingsStorage.shared.selectedRouteIds
                    let colorIndex = selectedRouteIds.firstIndex(of: route.id) ?? 0
                    let color = colors[colorIndex % colors.count]
                    
                    MapPolyline(coordinates: coordinates)
                        .stroke(color, lineWidth: 4)
                }
            }
            
            // –ú–∞—Ä–∫–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
            if let city = cityDetail {
                Annotation(city.name, coordinate: CLLocationCoordinate2D(latitude: city.lat, longitude: city.lon)) {
                    Image(systemName: "mappin.circle.fill")
                        .foregroundColor(.blue)
                        .font(.title)
                }
            }
        }
        .mapControls {
            MapUserLocationButton()
            MapCompass()
            MapScaleView()
        }
        .onAppear {
            loadCityAndRoutes()
        }
        .navigationTitle("map_title".localized)
        .navigationBarTitleDisplayMode(.inline)
        .toolbar {
            ToolbarItem(placement: .principal) {
                VStack {
                    Text("map_title".localized)
                        .font(.headline)
                    Rectangle()
                        .frame(height: 1)
                        .foregroundColor(.gray.opacity(0.3))
                        .padding(.horizontal)
                }
            }
        }
    }
    
    private func loadCityAndRoutes() {
        guard let cityId = SettingsStorage.shared.selectedCityId else {
            print("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω")
            return
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Ä–æ–¥–µ
        NetworkManager.shared.getCityInfo(cityId: cityId) { result in
            DispatchQueue.main.async {
                switch result {
                case .success(let city):
                    self.cityDetail = city
                    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ
                    let region = MKCoordinateRegion(
                        center: CLLocationCoordinate2D(latitude: city.lat, longitude: city.lon),
                        span: MKCoordinateSpan(latitudeDelta: 0.05, longitudeDelta: 0.05)
                    )
                    self.cameraPosition = .region(region)
                    print("üìç –ö–∞—Ä—Ç–∞ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –≥–æ—Ä–æ–¥–µ: \(city.name) (\(city.lat), \(city.lon))")
                    
                case .failure(let error):
                    print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ—Ä–æ–¥–µ: \(error)")
                    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–æ—Ä–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                    self.loadSelectedRoutes()
                }
            }
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
        loadSelectedRoutes()
    }
    
    private func loadSelectedRoutes() {
        let selectedRouteIds = SettingsStorage.shared.selectedRouteIds
        print("üéØ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã IDs: \(selectedRouteIds)")
        
        // –ó–∞–≥—Ä—É–∑–∏ –º–∞—Ä—à—Ä—É—Ç—ã –∏–∑ –∫—ç—à–∞
        let allRoutes = SettingsStorage.shared.cachedRoutes
        let selectedRoutes = allRoutes.filter { selectedRouteIds.contains($0.id) }
        
        print("üéØ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: \(selectedRoutes.count)")
        
        for route in selectedRoutes {
            let coordinates = parseCoordinates(from: route.location)
            print("üìç –ú–∞—Ä—à—Ä—É—Ç \(route.routeNumber) - \(coordinates.count) —Ç–æ—á–µ–∫")
        }
        
        self.selectedRoutes = selectedRoutes
        
        // –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ø–æ –ø–µ—Ä–≤–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É
        if cityDetail == nil && !selectedRoutes.isEmpty,
           let firstRoute = selectedRoutes.first {
            let coordinates = parseCoordinates(from: firstRoute.location)
            if let firstCoordinate = coordinates.first {
                let region = MKCoordinateRegion(
                    center: firstCoordinate,
                    span: MKCoordinateSpan(latitudeDelta: 0.05, longitudeDelta: 0.05)
                )
                cameraPosition = .region(region)
                print("üìç –ö–∞—Ä—Ç–∞ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ –ø–µ—Ä–≤–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É")
            }
        }
    }
    
    private func parseCoordinates(from locationString: String) -> [CLLocationCoordinate2D] {
        var coordinates: [CLLocationCoordinate2D] = []
        
        // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º –∏ –ø—Ä–æ–±–µ–ª–∞–º
        let components = locationString.components(separatedBy: CharacterSet(charactersIn: ", "))
            .compactMap { Double($0) }
        
        // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–¥—É—Ç –ø–∞—Ä–∞–º–∏: lon, lat, lon, lat, ...
        for i in stride(from: 0, to: components.count - 1, by: 2) {
            let lon = components[i]
            let lat = components[i + 1]
            let coordinate = CLLocationCoordinate2D(latitude: lat, longitude: lon)
            coordinates.append(coordinate)
        }
        
        return coordinates
    }
}

// –°–æ–∑–¥–∞–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
class LocationManager: NSObject, ObservableObject, CLLocationManagerDelegate {
    private let manager = CLLocationManager()
    
    override init() {
        super.init()
        manager.delegate = self
        manager.desiredAccuracy = kCLLocationAccuracyBest
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        if manager.authorizationStatus == .notDetermined {
            manager.requestWhenInUseAuthorization()
        }
    }
    
    func locationManagerDidChangeAuthorization(_ manager: CLLocationManager) {
        switch manager.authorizationStatus {
        case .authorizedWhenInUse, .authorizedAlways:
            print("‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ")
            manager.startUpdatingLocation()
        case .denied, .restricted:
            print("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        case .notDetermined:
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        @unknown default:
            break
        }
    }
    
    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {
        print("‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞—Ü–∏–∏: \(error.localizedDescription)")
    }
}

extension MKCoordinateRegion {
    static let defaultRegion = MKCoordinateRegion(
        center: CLLocationCoordinate2D(latitude: 51.1605, longitude: 71.4704),
        span: MKCoordinateSpan(latitudeDelta: 0.05, longitudeDelta: 0.05)
    )
}
