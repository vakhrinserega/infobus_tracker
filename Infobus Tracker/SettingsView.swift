//
//  SettingsView.swift
//  Infobus Tracker
//
//  Created by Mag on 02.09.2025.
//

import SwiftUI

struct SettingsView: View {
    @State private var countries: [Country] = []
    @State private var cities: [CityShort] = []
    
    @State private var selectedCountryId: Int?
    @State private var selectedCityId: Int?
    @State private var onlyAccessibleBuses: Bool = false
    
    @State private var isLoadingCountries = true
    @State private var isLoadingCities = false
    
    var body: some View {
        NavigationView {
            Form {
                Section(header: Text("–†–µ–≥–∏–æ–Ω")) {
                    if isLoadingCountries {
                        ProgressView("–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω‚Ä¶")
                    } else {
                        Picker("–°—Ç—Ä–∞–Ω–∞", selection: $selectedCountryId) {
                            ForEach(countries, id: \.id) { country in
                                Text(country.name).tag(Optional(country.id))
                            }
                        }
                        .onChange(of: selectedCountryId) { newValue in
                            if let id = newValue {
                                loadCities(for: id)
                            }
                        }
                    }
                    
                    if isLoadingCities {
                        ProgressView("–ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ä–æ–¥–æ–≤‚Ä¶")
                    } else {
                        Picker("–ì–æ—Ä–æ–¥", selection: $selectedCityId) {
                            ForEach(cities, id: \.id) { city in
                                Text(city.name).tag(Optional(city.id))
                            }
                        }
                        .onChange(of: selectedCityId) { newValue in
                            if let id = newValue {
                                print("‚úÖ selectedCityId: \(id)")
                            }
                        }
                    }
                }
                
                Section(header: Text("–ú–∞—Ä—à—Ä—É—Ç—ã")) {
                    Text("–ò—Å—Ç–æ—Ä–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –±—É–¥–µ—Ç –∑–¥–µ—Å—å")
                        .foregroundColor(.secondary)
                }
                
                Section(header: Text("–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å")) {
                    Toggle("–¢–æ–ª—å–∫–æ –∞–≤—Ç–æ–±—É—Å—ã —Å –ø–∞–Ω–¥—É—Å–æ–º", isOn: $onlyAccessibleBuses)
                }
                
                Section(header: Text("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")) {
                    HStack {
                        Text("–ö–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
                        Spacer()
                        Text("ABC12345") // –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
                            .foregroundColor(.gray)
                            .onTapGesture {
                                UIPasteboard.general.string = "ABC12345"
                            }
                    }
                    Button("–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É") {
                        // TODO: –æ—Ç–∫—Ä—ã—Ç—å –ø–æ—á—Ç—É –∏–ª–∏ —á–∞—Ç
                    }
                }
            }
            .navigationTitle("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            .onAppear {
                loadCountries()
            }
        }
    }
    
    // MARK: - Network
    
    private func loadCountries() {
        isLoadingCountries = true
        NetworkManager.shared.getCountries { result in
            DispatchQueue.main.async {
                isLoadingCountries = false
                switch result {
                case .success(let data):
                    self.countries = data
                    print("üì• –ó–∞–≥—Ä—É–∑–∏–ª–∏ —Å—Ç—Ä–∞–Ω—ã: \(data.map { $0.name })")
                    
                    if let first = data.first {
                        self.selectedCountryId = first.id
                        loadCities(for: first.id)
                    }
                case .failure(let error):
                    print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω: \(error)")
                }
            }
        }
    }
    
    private func loadCities(for countryId: Int) {
        isLoadingCities = true
        NetworkManager.shared.getCities(countryId: countryId) { result in
            DispatchQueue.main.async {
                isLoadingCities = false
                switch result {
                case .success(let data):
                    self.cities = data
                    print("üì• –ó–∞–≥—Ä—É–∑–∏–ª–∏ –≥–æ—Ä–æ–¥–∞: \(data.map { $0.name })")
                    
                    if let first = data.first {
                        self.selectedCityId = first.id
                    }
                case .failure(let error):
                    print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ä–æ–¥–æ–≤: \(error)")
                }
            }
        }
    }
}
